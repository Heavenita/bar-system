/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import estabelecimento.Estabelecimento;
import estabelecimento.Pedido;
import estabelecimento.ItemPedido;
import estabelecimento.Status;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.time.format.DateTimeFormatter;
/**
 *
 * @author Pedro Rossi
 */
public class EstabelecimentoFrame extends javax.swing.JFrame {
    private Estabelecimento estabelecimento;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(EstabelecimentoFrame.class.getName());

    /**
     * Creates new form EstabelecimentoFrame
     */
    public EstabelecimentoFrame(Estabelecimento estabelecimento) {
        initComponents();
        this.estabelecimento = estabelecimento;
        carregarPedidosNaTabela(estabelecimento.getPedidos());
        
        tabelListaPedidos.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            exibirDetalhesDoPedidoSelecionado();
            }
        });
        
        labelEstabelecimentoNome.setText(estabelecimento.getNome());
    }

    EstabelecimentoFrame() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    
    private void carregarPedidosNaTabela(List<Pedido> pedidos) {
        String[] colunas = {"ID", "Cliente", "Status", "Data do Pedido", "Valor"};
        DefaultTableModel model = new DefaultTableModel(colunas, 0);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
    for (Pedido p : pedidos) {
        // Somente se quiser filtrar por status
        // if (!p.getStatus().equals("FINALIZADO")) continue;

        double total = 0;
        for (ItemPedido ip : p.getItens()) {
            total += ip.getQuantidade() * ip.getItem().getPreco();
        }

        Object[] linha = {
            p.getId(),
            p.getCliente().getNome(),
            p.getStatus(), // certifique-se que isso retorna algo tipo "FINALIZADO"
            p.getHoraPedido().format(formatter), // ou outro nome de m√©todo que retorna LocalDateTime
            String.format("R$ %.2f", total)
        };
        model.addRow(linha);
    }
    System.out.println("Quantidade de pedidos: " + pedidos.size());
    tabelListaPedidos.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelListaPedidos = new javax.swing.JTable();
        buttonVoltar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonFinalizarPedido = new javax.swing.JButton();
        buttonPedidoPronto = new javax.swing.JButton();
        buttonRemoverPedido = new javax.swing.JButton();
        labelEstabelecimentoNome = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelListaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Cliente", "Status", "Data do Pedido", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelListaPedidos);

        buttonVoltar.setText("Voltar");
        buttonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVoltarActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        buttonFinalizarPedido.setText("Pedido Finalizado");
        buttonFinalizarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarPedidoActionPerformed(evt);
            }
        });

        buttonPedidoPronto.setText("Pedido Pronto");
        buttonPedidoPronto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPedidoProntoActionPerformed(evt);
            }
        });

        buttonRemoverPedido.setText("Remover Pedido");
        buttonRemoverPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverPedidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelEstabelecimentoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(406, 406, 406)
                .addComponent(buttonVoltar)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonRemoverPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonPedidoPronto)
                        .addGap(116, 116, 116)
                        .addComponent(buttonFinalizarPedido))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(257, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonVoltar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelEstabelecimentoNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonFinalizarPedido)
                    .addComponent(buttonPedidoPronto)
                    .addComponent(buttonRemoverPedido))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void exibirDetalhesDoPedidoSelecionado() {
    int linha = tabelListaPedidos.getSelectedRow();
    if (linha == -1) return;

    int idPedido = (int) tabelListaPedidos.getValueAt(linha, 0);

    for (Pedido pedido : estabelecimento.getPedidos()) {
        if (pedido.getId() == idPedido) {
            StringBuilder detalhes = new StringBuilder();
            detalhes.append("Pedido #").append(pedido.getId()).append("\n");
            detalhes.append("Cliente: ").append(pedido.getCliente().getNome()).append("\n");
            detalhes.append("Status: ").append(pedido.getStatus()).append("\n");
            detalhes.append("Data: ").append(pedido.getHoraPedido().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))).append("\n\n");

            detalhes.append("Itens:\n");
            for (ItemPedido itemPedido : pedido.getItens()) {
                detalhes.append("- ")
                        .append(itemPedido.getQuantidade())
                        .append(" x ")
                        .append(itemPedido.getItem().getNome())
                        .append(" (R$ ")
                        .append(String.format("%.2f", itemPedido.getItem().getPreco()))
                        .append(")\n");
            }

            detalhes.append("\nTotal: R$ ").append(String.format("%.2f", pedido.calcularPedido()));

            jTextArea1.setText(detalhes.toString());
            return;
        }
    }

    jTextArea1.setText("Pedido n√£o encontrado.");
    }
    private void buttonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVoltarActionPerformed
        new RestauranteFrame(estabelecimento).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_buttonVoltarActionPerformed

    private void buttonRemoverPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverPedidoActionPerformed
        int linha = tabelListaPedidos.getSelectedRow();
        if (linha == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecione um pedido para remover.");
            return;
        }

        int idPedido = (int) tabelListaPedidos.getValueAt(linha, 0);

        estabelecimento.getPedidos().removeIf(p -> p.getId() == idPedido);

        carregarPedidosNaTabela(estabelecimento.getPedidos());
        jTextArea1.setText("");
    }//GEN-LAST:event_buttonRemoverPedidoActionPerformed

    private void buttonPedidoProntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPedidoProntoActionPerformed
        int linha = tabelListaPedidos.getSelectedRow();
    if (linha == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Selecione um pedido para marcar como pronto.");
        return;
    }

    int idPedido = (int) tabelListaPedidos.getValueAt(linha, 0);

    for (Pedido pedido : estabelecimento.getPedidos()) {
        if (pedido.getId() == idPedido) {
            pedido.setStatus(Status.Pronto);
            break;
        }
    }

    carregarPedidosNaTabela(estabelecimento.getPedidos());
    exibirDetalhesDoPedidoSelecionado();
    }//GEN-LAST:event_buttonPedidoProntoActionPerformed

    private void buttonFinalizarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarPedidoActionPerformed
        int linha = tabelListaPedidos.getSelectedRow();
    if (linha == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Selecione um pedido para finalizar.");
        return;
    }

    int idPedido = (int) tabelListaPedidos.getValueAt(linha, 0);

    for (Pedido pedido : estabelecimento.getPedidos()) {
        if (pedido.getId() == idPedido) {
            pedido.setStatus(Status.Entregue);
            break;
        }
    }

    carregarPedidosNaTabela(estabelecimento.getPedidos());
    exibirDetalhesDoPedidoSelecionado();
    }//GEN-LAST:event_buttonFinalizarPedidoActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonFinalizarPedido;
    private javax.swing.JButton buttonPedidoPronto;
    private javax.swing.JButton buttonRemoverPedido;
    private javax.swing.JButton buttonVoltar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelEstabelecimentoNome;
    private javax.swing.JTable tabelListaPedidos;
    // End of variables declaration//GEN-END:variables
}
